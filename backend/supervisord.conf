[supervisord]
nodaemon=true                     ; Keep supervisord in the foreground, common for containers
logfile=/var/log/supervisor/supervisord.log ; Main supervisord log file
logfile_maxbytes=50MB             ; Max size of supervisord log file
logfile_backups=10                ; Number of supervisord log backups
loglevel=info                     ; Supervisord log level (debug, info, warn, error, critical)
pidfile=/var/run/supervisord.pid  ; PID file location
childlogdir=/var/log/supervisor   ; Directory for child process log files (if not stdout/stderr)
user=root                         ; User to run supervisord as (usually root to manage processes)

[unix_http_server]
file=/var/run/supervisor.sock     ; Path to the supervisor socket file
chmod=0700                        ; Permissions for the socket file
; username=user                   ; Optional: HTTP server username
; password=pass                   ; Optional: HTTP server password

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; URL to connect to supervisord

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

; Common settings for Laravel Artisan commands and PHP-FPM
; These can be inherited or overridden in specific [program:x] sections
; However, supervisord doesn't have direct inheritance, so these are more like conventions to repeat.

[program:php-fpm]
command=/usr/sbin/php-fpm8.2 -F -O ; Command to start PHP-FPM (adjust version if needed)
                                   ; -F: Stay in foreground
                                   ; -O: Send logs to stderr for better Docker/container logging
autostart=true                     ; Start this program automatically when supervisord starts
autorestart=true                   ; Restart automatically if it exits unexpectedly
priority=999                       ; Higher priority, ensure it starts/stops reliably
user=www-data                      ; Run PHP-FPM as this user (common for web servers)
stdout_logfile=/dev/stdout         ; Redirect stdout to supervisord's stdout
stdout_logfile_maxbytes=0          ; Do not rotate stdout (let container/system handle)
stderr_logfile=/dev/stderr         ; Redirect stderr to supervisord's stderr
stderr_logfile_maxbytes=0          ; Do not rotate stderr
stopsignal=QUIT                    ; Send SIGQUIT for graceful shutdown (workers finish requests)
stopwaitsecs=30                    ; Wait up to 30 seconds for graceful shutdown
stopasgroup=true                   ; Send stop signal to the entire process group
killasgroup=true                   ; Kill the entire process group if stop fails

[program:reverb-server]
command=/usr/bin/php /var/www/html/artisan reverb:start --host=0.0.0.0 --port=8080 ; Full path to php and artisan
                                                                                 ; Specify host and port if needed
directory=/var/www/html            ; Working directory for the command
user=www-data                      ; Run as this user
autostart=true
autorestart=true
priority=900                       ; Lower priority than php-fpm
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stopwaitsecs=20                    ; Allow some time for Reverb to shut down gracefully
stopasgroup=true
killasgroup=true

[program:queue-worker]
command=/usr/bin/php /var/www/html/artisan queue:work redis --sleep=3 --tries=3 --timeout=60 ; Full path to php and artisan
                                                                                          ; Specify connection (e.g., redis)
                                                                                          ; --sleep=3: Sleep if no jobs
                                                                                          ; --tries=3: Max attempts
                                                                                          ; --timeout=60: Job timeout
process_name=%(program_name)s_%(process_num)02d ; Naming for multiple worker processes
directory=/var/www/html
user=www-data
autostart=true
autorestart=true
priority=800
numprocs=4                         ; Number of queue worker processes to run
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stopwaitsecs=70                    ; Allow time for current job to finish (should be > job timeout)
stopasgroup=true                   ; Ensure all child processes of the worker are stopped
killasgroup=true                   ; Ensure all child processes of the worker are killed

[program:laravel-scheduler]
command=/usr/bin/php /var/www/html/artisan schedule:run
directory=/var/www/html
user=www-data
autostart=true
autorestart=true                   ; Restart if it crashes, though it should exit cleanly
startsecs=0                        ; It's a short-lived command
cron_minutes=* ; Run every minute (equivalent to * * * * * in crontab)
                                   ; Supervisord is not a cron replacement, but can run commands periodically
                                   ; For true cron behavior, use the system cron to call `schedule:run`
                                   ; This is an alternative if you want supervisord to manage it.
                                   ; If using system cron, remove this [program:laravel-scheduler] block.
stdout_logfile=/var/log/supervisor/scheduler.out.log
stderr_logfile=/var/log/supervisor/scheduler.err.log
stdout_logfile_maxbytes=1MB
stderr_logfile_maxbytes=1MB

[program:ticks-broadcast]
command=/usr/bin/php /var/www/html/artisan ticks:broadcast ; Full path to php and artisan
directory=/var/www/html
user=www-data
autostart=true
autorestart=true                   ; Changed to true, assuming it's a long-running process
                                   ; If it's a one-off task, set to false or handle via deploy script
startsecs=10                       ; Time the program needs to be running to be considered "started"
priority=850
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stopwaitsecs=20
stopasgroup=true
killasgroup=true
