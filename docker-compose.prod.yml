
services:

  ticker:
    container_name: ticker
    build:
      context: ./ticker
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    depends_on:
      - redis
    networks:
      - web
    command: ["python3", "ticker.py"]

  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - "3306:3306"
    volumes:
      - /home/mysql_data:/var/lib/mysql
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - web

  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - /home/redis_data:/data
    networks:
      - web

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8090:80"
    env_file: .env
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - mysql
    networks:
      - web

  monitor_orders:
    container_name: monitor_orders
    build:
      context: ./monitor_orders
    volumes:
      - ./monitor_orders:/app
    env_file: .env
    depends_on:
      - redis
      - mysql
    restart: always
    networks:
      - web
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 20s
      timeout: 5s
      retries: 3

  sync_positions:
    container_name: sync_positions
    build:
      context: ./sync_positions
    volumes:
      - ./sync_positions:/app
    env_file: .env
    depends_on:
      - redis
      - mysql
    restart: always
    networks:
      - web
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 20s
      timeout: 5s
      retries: 3

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9001:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - web

volumes:
  mysql_data:
  redis_data:
  portainer_data:

networks:
  web:
    driver: bridge
